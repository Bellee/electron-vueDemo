'use strict'

import { app, BrowserWindow, ipcMain } from 'electron'

// 注意这个autoUpdater不是electron中的autoUpdater
const { autoUpdater } = require('electron-updater')
const log = require('electron-log')
/**
 * Set `__static` path to static files in production
 * https://simulatedgreg.gitbooks.io/electron-vue/content/en/using-static-assets.html
 */
if (process.env.NODE_ENV !== 'development') {
  global.__static = require('path').join(__dirname, '/static').replace(/\\/g, '\\\\')
}

let mainWindow
let updateWindow
let updateProcessWindow

const { webContents } = require('electron')
const winURL = process.env.NODE_ENV === 'development'
  ? `http://localhost:9080`
  : `file://${__dirname}/index.html`

function createWindow () {
  /**
   * Initial window options
   */
  mainWindow = new BrowserWindow({
    height: 672,
    useContentSize: true,
    width: 496,
    titleBarStyle: 'hiddenInset',
    fullscreenable: false, // 是否允许全屏
    resizable: false,
    backgroundColor: '#fff'
  })

  mainWindow.loadURL(winURL)

  mainWindow.on('closed', () => {
    mainWindow = null
  })
}

app.on('ready', () => {
  createWindow()
  // if (process.env.NODE_ENV === 'production') {
  //   updateHandle()
  //   ipcMain.on('checkForUpdate', () => {
  //   // 执行自动更新检查
  //     autoUpdater.checkForUpdates()
  //   })
  // }
  autoUpdater.autoDownload = false // 不自动下载更新包
  updateHandle()
  autoUpdater.checkForUpdates()
  ipcMain.on('checkForUpdate', () => {
    // 执行自动更新检查
    autoUpdater.checkForUpdates()
  })
})

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  if (mainWindow === null) {
    createWindow()
  }
})

// 检测更新，在你想要检查更新的时候执行，renderer事件触发后的操作自行编写
function updateHandle() {
  let message = {
    error: '检查更新出错',
    checking: '正在检查更新……',
    updateAva: '检测到新版本，正在下载……',
    updateNotAva: '现在使用的就是最新版本，不用更新'
  }

  const os = require('os')
  // autoUpdater.autoDownload = false// 不自动下载更新包
  autoUpdater.autoInstallOnAppQuit = false
  autoUpdater.on('error', function (error) {
    // sendUpdateMessage(message.error)
  })

  autoUpdater.on('checking-for-update', function () {
    // sendUpdateMessage(message.checking)
  })

  // 检测到有新版本
  autoUpdater.on('update-available', function (info) {
    // const BrowserWindow = require('electron').BrowserWindow

    if (!updateWindow && !updateProcessWindow) {
      updateWindow = new BrowserWindow({
        width: 436,
        height: 381,
        useContentSize: true,
        titleBarStyle: 'hiddenInset',
        fullscreenable: false, // 是否允许全屏
        resizable: false,
        backgroundColor: '#fff'
      })

      updateWindow.loadURL(`${winURL}#/renew`)
      updateWindow.show()
      updateWindow.webContents.on('did-finish-load', () => {
        updateWindow.webContents.send('main-process-messages', info)
      })
    }

    // win.webContents.send('downloadupdate', info)
  })

  autoUpdater.on('update-not-available', function (info) {
    sendUpdateMessage(message.updateNotAva)
  })

  // 更新下载进度事件
  autoUpdater.on('download-progress', function (progressObj) {
    if (updateProcessWindow) {
      updateProcessWindow.webContents.send('downloadProgress', Number.parseInt(progressObj.percent.toFixed(0)))
    }
  })

  autoUpdater.on('update-downloaded', function (event, releaseNotes, releaseName, releaseDate, updateUrl, quitAndUpdate) {
    // ipcMain.on('isUpdateNow', (e, arg) => {
    //   // some code here to handle event
    //   autoUpdater.quitAndInstall()
    // })
    updateProcessWindow.webContents.send('downloadProgress', 100)
    // mainWindow.webContents.send('isUpdateNow')
  })

  ipcMain.on('TurnToUpdateProcessPage', function (event, arg) {
    updateProcessWindow = new BrowserWindow({
      height: 250,
      useContentSize: true,
      width: 436,
      titleBarStyle: 'hiddenInset',
      backgroundColor: '#fff'
    })
    updateProcessWindow.on('closed', function () {
      // updateWindow = null
      autoUpdater.removeAllListeners()
    })
    updateWindow.close()
    updateProcessWindow.loadURL(`${winURL}#/UpdateProgress?version=` + arg)
    updateProcessWindow.webContents.on('did-finish-load', () => {
      let filePath = autoUpdater.downloadUpdate()
    })
  })
}

// 通过main进程发送事件给renderer进程，提示更新信息
function sendUpdateMessage(text) {
  mainWindow.webContents.send('message', text)
}

// ipcMain.on('MainMsgFromRender', function (event, arg) {
//   arg.webContents.send('RenderMsgFromMain', 'arg')
// })

/**
 * Auto Updater
 *
 * Uncomment the following code below and install `electron-updater` to
 * support auto updating. Code Signing with a valid certificate is required.
 * https://simulatedgreg.gitbooks.io/electron-vue/content/en/using-electron-builder.html#auto-updating
 */

/*
import { autoUpdater } from 'electron-updater'

autoUpdater.on('update-downloaded', () => {
  autoUpdater.quitAndInstall()
})

app.on('ready', () => {
  if (process.env.NODE_ENV === 'production') autoUpdater.checkForUpdates()
})
 */
