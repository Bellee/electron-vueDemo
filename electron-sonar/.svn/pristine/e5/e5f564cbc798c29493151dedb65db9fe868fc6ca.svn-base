var httpClient = require('../../actions/utils/httpClient')
var server = require('../../actions/config/server')
var execution = require('../../actions/execution/v1')
var async = require('async')

var mergerFileList = (fileList, docs, callback) => {
  for (let i = 0; i < fileList.length; i++) {
    var dao = fileList[i]
    var doc = null
    for (let j = 0; j < docs.length; j++) {
      if (docs[j].project_episode_id == dao.projectEpisodeId) {
        doc = docs[j]
        break
      }
    }

    if (!doc || doc.status == 2) {
      switch (dao.epAuditStatus) {
        case 'A':
          dao.viewStatus = '待审核'
          dao.viewOpt = '重新上传'
          dao.viewOptDisable = 1
          dao.viewBackground = 'background:#FCB812'
          break
        case 'B':
          dao.viewStatus = '已通过'
          dao.viewOpt = '重新上传'
          dao.viewOptDisable = 1
          dao.viewBackground = 'background:#52C41A'
          break
        case 'C':
          dao.viewStatus = '未通过'
          dao.viewOpt = '重新上传'
          dao.viewOptDisable = 0
          dao.viewBackground = 'background:#FCB812'
          break
        default:
          dao.viewStatus = '待上传'
          dao.viewOpt = '上传'
          dao.viewOptDisable = 0
          dao.viewBackground = 'background:#999999'
          break
      }
    } else {
      if (doc.status == 1) {
        if (doc.is_pause == 1) {
          dao.viewStatus = '待续传'
          dao.viewOpt = '继续'
          dao.viewOptDisable = 0
        } else {
          dao.viewStatus = '上传中'
          dao.viewOpt = '暂停'
          dao.viewOptDisable = 0
        }
        dao.viewProcPercent = doc.proc_percent
        switch (doc.proc_status) {
          case 1:
            dao.viewProcStatus = '提取音频'
            break
          case 2:
            dao.viewProcStatus = '上传音频'
            break
          case 3:
            dao.viewProcStatus = '转码中'
            break
          case 4:
            dao.viewProcStatus = '切片中'
            break
          case 5:
            dao.viewProcStatus = '上传切片'
            break
          default:
            dao.viewProcStatus = '等待中'
            break
        }
      } else if (doc.status == -1) {
        dao.viewStatus = '上传异常'
        dao.viewOptDisable = 0
        dao.procPercent = doc.proc_percent
        switch (doc.proc_status) {
          case 1:
            dao.viewOpt = '重新提取'
            dao.viewProcStatus = '音频提取失败'
            break
          case 2:
            dao.viewOpt = '重新上传音频'
            dao.viewProcStatus = '上传音频失败'
            break
          case 3:
            dao.viewOpt = '重新转码'
            dao.viewProcStatus = '转码失败'
            break
          case 4:
            dao.viewOpt = '重新切片'
            dao.viewProcStatus = '切片失败'
            break
          case 5:
            dao.viewOpt = '重新上传切片'
            dao.viewProcStatus = '上传切片失败'
            break
          default:
            dao.viewOpt = '重新提取'
            dao.viewProcStatus = '音频提取失败'
            break
        }
      }
    }
  }
  callback(fileList)
}

// 更新进度条
var updateProgress = (projectEpisodeId, proc_status, percent) => {
  var cur_status = ''
  var cur_percent = 0
  // 0等待中 1音频提取 2音频上传 3转码 4切片 5切片上传
  switch (proc_status) {
    case 0:
      cur_status = '等待中'
      break
    case 1:
      cur_status = '提取音频'
      break
    case 2:
      cur_status = '上传音频'
      break
    case 3:
      cur_status = '转码中'
      break
    case 4:
      cur_status = '切片中'
      break
    case 5:
      cur_status = '上传切片'
      break
    case 6:
      cur_status = '上传成功'
      break
  }

  if (proc_status == 6) {
    cur_percent = 100
  } else {
    cur_percent = Math.round(cur_percent + percent)
    if (cur_percent > 99) {
      cur_percent = 99
    }
  }
  // todo projectEpisodeId
  console.log(new Date() + ' 进度：' + cur_status + ' ' + cur_percent)
}

var processItems = () => {
  var cnt = 0
  execution.selectOrigin(1, function (err, docs) {
    for (let i = 0; i < docs.length; i++) {
      var item = docs[i]
      if (cnt > 3) {
        break
      }

      if (item && item.status == 1) {
        if (item.is_pause == 1) {
          continue
        } else if (item.proc_status > 0) {
          cnt++
        } else {
          item.proc_status = 1
          cnt++
          // 抽取音频
          execution.novideo(item, updateProgress, function (err, nvd) {
            if (nvd && nvd.length > 0) {
              // 音频上传
              execution.uploadACRCloud(nvd[0], updateProgress, function (err, acr) {
                // 降码
                execution.resize(item, updateProgress, function (err, rsz) {
                  if (rsz && rsz.length > 0) {
                    // 切片
                    execution.cut(rsz[0], updateProgress, function (err, cuts) {
                      // 上传
                      async.mapLimit(cuts, cuts.length, function (cut, callback) {
                        execution.uploadQiniu(cut, cuts.length, updateProgress, callback)
                      }, function (err, qnu) {
                        if (err) {

                        } else {
                          execution.uploadQiniuComplete(rsz[0], updateProgress, function (err, cpl) {
                            item.status = 2
                            item.proc_status = 6
                            processItems()
                          })
                        }
                      })
                    })
                  }
                })
              })
            }
          })
        }
      }
    }
  })
}

module.exports.getEpisodeList = (producerId, status, name, page, rows, callback) => {
  execution.init(producerId)
  var cond = {}
  cond.instance_id = producerId
  if (status == 0) {
    execution.selectOrigin(cond, function (err, docs) {
      httpClient.get({
        json: true,
        url: server.host + server.api.api_episode_list + '?page=' + page + '&rows=' + rows + '&producerId=' + producerId + '&name=' + encodeURIComponent(name)
      }, function (data) {
        mergerFileList(data.data.rows, docs, callback)
      })
    })
  } else if (status == 1) {
    cond.status = {}
    cond.status.$in = [1, -1]
    execution.selectOrigin(cond, function (err, docs) {
      var ids = docs.map(doc => doc.project_episode_id)
      httpClient.get({
        json: true,
        url: server.host + server.api.api_episode_list + '?page=' + page + '&rows=' + rows + '&producerId=' + producerId + '&name=' + encodeURIComponent(name) + '&sts=' + '&exIds=' + ids
      }, function (data) {
        mergerFileList(data.data.rows, docs, callback)
      })
    })
  } else if (status == 2) {
    cond.status = 1
    execution.selectOrigin(cond, function (err, docs) {
      var ids = docs.map(doc => doc.project_episode_id)
      ids.push(-1)
      httpClient.get({
        json: true,
        url: server.host + server.api.api_episode_list + '?page=' + page + '&rows=' + rows + '&producerId=' + producerId + '&name=' + encodeURIComponent(name) + '&inIds=' + ids
      }, function (data) {
        mergerFileList(data.data.rows, docs, callback)
      })
    })
  } else if (status == 3) {
    cond.status = -1
    execution.selectOrigin(cond, function (err, docs) {
      var ids = docs.map(doc => doc.project_episode_id)
      ids.push(-1)
      httpClient.get({
        json: true,
        url: server.host + server.api.api_episode_list + '?page=' + page + '&rows=' + rows + '&producerId=' + producerId + '&name=' + encodeURIComponent(name) + '&inIds=' + ids
      }, function (data) {
        mergerFileList(data.data.rows, docs, callback)
      })
    })
  } else {
    cond.status = {}
    cond.status.$in = [1, -1]
    execution.selectOrigin(cond, function (err, docs) {
      var ids = docs.map(doc => doc.project_episode_id)
      httpClient.get({
        json: true,
        url: server.host + server.api.api_episode_list + '?page=' + page + '&rows=' + rows + '&producerId=' + producerId + '&name=' + encodeURIComponent(name) + '&sts=C' + '&exIds=' + ids
      }, function (data) {
        mergerFileList(data.data.rows, docs, callback)
      })
    })
  }
}

module.exports.addItem = (filePath, fileTitle, projectEpisodeId) => {
  // 添加视频源
  execution.addOrigin(filePath, fileTitle, projectEpisodeId, function (err, org) {
    processItems()
  })
}
